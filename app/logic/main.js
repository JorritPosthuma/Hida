angular.module("hida", ['ui.router', 'inspinia']).config(function($stateProvider, $urlRouterProvider) {
  $stateProvider.state("main", {
    abstract: true,
    templateUrl: "parts/main.html",
    controller: "MainController"
  }).state("main.home", {
    url: "/home",
    templateUrl: "parts/home.html",
    controller: "HomeController"
  }).state("main.export", {
    url: "/export",
    templateUrl: "parts/export.html",
    controller: "ExportController"
  }).state("login", {
    url: "/login",
    templateUrl: "parts/login.html"
  });
  return $urlRouterProvider.otherwise("/home");
});

var DefaultController;

DefaultController = (function() {
  function DefaultController(scope, root) {
    this.scope = scope;
    this.root = root;
    this.scope.root = this.root;
    this.scope.ctrl = this;
    this.init();
    this.scope.$on('$destroy', this.destroy);
  }

  DefaultController.prototype.init = function() {};

  DefaultController.prototype.destroy = function() {};

  return DefaultController;

})();

var DicomFileReader, color_interpretations,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

color_interpretations = ["RGB", "PALETTE COLOR", "YBR_FULL", "YBR_FULL_422", "YBR_PARTIAL_422", "YBR_PARTIAL_420", "YBR_RCT"];

DicomFileReader = (function() {
  var frames;

  frames = [];

  function DicomFileReader(path) {
    this.path = path;
    this.get = __bind(this.get, this);
    this._load = __bind(this._load, this);
    this._metadata = __bind(this._metadata, this);
    this._read = __bind(this._read, this);
    this.isColorImage = __bind(this.isColorImage, this);
    this.fs = require("fs");
    this._read();
    this._metadata();
    this._load();
  }

  DicomFileReader.prototype.isColorImage = function(color) {};

  DicomFileReader.prototype._read = function() {
    var buffer;
    buffer = this.fs.readFileSync(this.path);
    return this.dataSet = dicomParser.parseDicom(new Uint8Array(buffer));
  };

  DicomFileReader.prototype._metadata = function() {
    this.framecount = this.dataSet.string("x00280008") || 1;
    this.color_int = this.dataSet.string("x00280004");
    return this.is_color = -1 !== color_interpretations.indexOf(this.color_int);
  };

  DicomFileReader.prototype._load = function() {
    var frame_id, method;
    method = this.is_color ? cornerstoneWADOImageLoader.makeColorImage : cornerstoneWADOImageLoader.makeGrayscaleImage;
    return this.frames = (function() {
      var _i, _ref, _results;
      _results = [];
      for (frame_id = _i = 0, _ref = this.framecount - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; frame_id = 0 <= _ref ? ++_i : --_i) {
        _results.push(method("" + this.path + "_" + frame_id, this.dataSet, this.dataSet.byteArray, this.color_int, frame_id));
      }
      return _results;
    }).call(this);
  };

  DicomFileReader.prototype.get = function(frame) {
    return this.frames[frame - 1];
  };

  return DicomFileReader;

})();

var module;

module = angular.module('hida');

module.filter('log', function() {
  return function(data) {
    console.log(data);
    return data;
  };
});

module.filter('print', function() {
  return function(data) {
    return JSON.stringify(data);
  };
});

module.filter('replace', function() {
  return function(text, a, b) {
    return text.replace(a, b);
  };
});

var module,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module = angular.module('hida');

module.controller('ExportController', function($scope, $rootScope) {
  return new ((function(_super) {
    __extends(_Class, _super);

    function _Class() {
      _Class.__super__.constructor.call(this, $scope, $rootScope);
    }

    return _Class;

  })(DefaultController));
});

var module,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module = angular.module('hida');

module.controller('HomeController', function($scope, $rootScope) {
  return new ((function(_super) {
    __extends(_Class, _super);

    _Class.prototype.ww = 0;

    _Class.prototype.wl = 0;

    _Class.prototype.frames = 1;

    _Class.prototype.color = 'No color';

    _Class.prototype.frame = 100;

    function _Class() {
      this.open = __bind(this.open, this);
      this.show = __bind(this.show, this);
      this.image = __bind(this.image, this);
      this.register = __bind(this.register, this);
      this.loaded = __bind(this.loaded, this);
      this.init = __bind(this.init, this);
      _Class.__super__.constructor.call(this, $scope, $rootScope);
      this.image("/Users/Jorrit/Development/Hida Private/Patientdata/ANONHBSAMCHERMES1/HIDASPECTFASE2RECONSCAC/1.2.752.37.1.1.3407820023.6.166606720130905");
      this.viewport.voi.windowWidth = 185;
      this.viewport.voi.windowCenter = 84;
      cornerstone.setViewport(this.element, this.viewport);
    }

    _Class.prototype.init = function() {
      this.$element = $('.dicom');
      this.element = this.$element[0];
      this.$document = $(document);
      cornerstone.enable(this.element);
      return this.register();
    };

    _Class.prototype.loaded = function() {
      return this.viewport != null;
    };

    _Class.prototype.register = function() {
      this.$element.bind('mousewheel', (function(_this) {
        return function(e) {
          var direction;
          e.preventDefault();
          if (!_this.loaded()) {
            return;
          }
          direction = e.originalEvent.wheelDelta;
          if (direction > 0) {
            if (_this.frame > 1) {
              _this.frame = _this.frame - 1;
              return _this.show();
            }
          } else {
            if (_this.frame < _this.frames) {
              _this.frame = _this.frame + 1;
              return _this.show();
            }
          }
        };
      })(this));
      return this.$element.mousedown((function(_this) {
        return function(e) {
          var lastX, lastY;
          if (!_this.loaded()) {
            return;
          }
          lastX = e.pageX;
          lastY = e.pageY;
          _this.$document.mousemove(function(e) {
            var deltaX, deltaY;
            deltaX = e.pageX - lastX;
            deltaY = e.pageY - lastY;
            lastX = e.pageX;
            lastY = e.pageY;
            _this.viewport.voi.windowWidth += deltaX / _this.viewport.scale;
            _this.viewport.voi.windowCenter += deltaY / _this.viewport.scale;
            cornerstone.setViewport(_this.element, _this.viewport);
            _this.ww = Math.round(_this.viewport.voi.windowWidth);
            _this.wl = Math.round(_this.viewport.voi.windowCenter);
            return _this.scope.$apply();
          });
          return _this.$document.mouseup(function(e) {
            _this.$document.unbind("mousemove");
            return _this.$document.unbind("mouseup");
          });
        };
      })(this));
    };

    _Class.prototype.image = function(file) {
      this.reader = new DicomFileReader(file);
      return this.show();
    };

    _Class.prototype.show = function() {
      return this.reader.get(this.frame).then((function(_this) {
        return function(image) {
          cornerstone.displayImage(_this.element, image);
          _this.viewport = cornerstone.getViewport(_this.element);
          _this.ww = _this.viewport.voi.windowWidth;
          _this.wl = _this.viewport.voi.windowCenter;
          _this.color = _this.reader.color_int;
          _this.frames = _this.reader.framecount;
          return _this.scope.$apply();
        };
      })(this));
    };

    _Class.prototype.open = function() {
      var file, self;
      file = $('#file');
      self = this;
      file.change(function() {
        return self.image($(this).val());
      });
      file.click();
      return false;
    };

    return _Class;

  })(DefaultController));
});

var module,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module = angular.module('hida');

module.controller('LoginController', function($scope, $rootScope) {
  return new ((function(_super) {
    __extends(_Class, _super);

    function _Class() {
      _Class.__super__.constructor.call(this, $scope, $rootScope);
    }

    return _Class;

  })(DefaultController));
});

var module,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module = angular.module('hida');

module.controller('MainController', function($scope, $rootScope, $state) {
  return new ((function(_super) {
    __extends(_Class, _super);

    function _Class() {
      _Class.__super__.constructor.call(this, $scope, $rootScope);
      $scope.$state = $state;
    }

    return _Class;

  })(DefaultController));
});

//# sourceMappingURL=data:application/json;base64,